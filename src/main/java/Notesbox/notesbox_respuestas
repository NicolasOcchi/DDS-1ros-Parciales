Requerimientos detallados
1. Como cliente, poder registrarme cargando los datos básicos de contacto (nombre,
apellido, email) y dirección de recepción de las órdenes.

    class cliente{
        method Cliente(string nombre, string apellido, string emaiil, string direccion)
        //es un constructor el cual será llamado por la interfaz a la hora de dar de alta al cliente
    }

2. Como cliente, poder consultar el catálogo de melodías y ordenar una o más cajitas
musicales para la dirección actual del cliente.

    (...) consultar el catalogo (...)
    por como modelamos las melodías, estas mismas podrían estar dentro de uan colección y hacer un get para poder
    mostrarlas por pantallas.
    Si es una lista, es hacer un getter de la lista


    (...) ordenar una o mas cajitas (...)
    var CajitaPrueba = new CajaDeCatalogo()

    MelodiaDeCatalogo melodiaDeCatalogoPrueba = new MelodiaDeCatalogo()

    MelodiaPersonalizada melodiaPersonalizadaPrueba = new MelodiaPersonalizada()
    melodiaPersonalizadaPrueba.cargar(melodia)

    class cliente{
        method ordenar(cajaAOrdenar){
            var OrdenInstanciada = new Orden(cajaAOrdenar, this.direccion)
            Ordenes.add(OrdenInstanciada)
        }
    }


3. Como cliente, poder consultar el estado de una orden que realicé.

    class orden{
        EstadoOrden estado;

        method getEstado(){
            return this.estado;
        }
    }
    // este enum representará el estado de la orden. cuando la orden se crea tendrá el estado de PENDIENTE
    // y cuando la orden sea entregada pasará a ENTREGADA.


4. Como cliente, poder consultar el tiempo estimado que queda hasta que la orden
llegue a mi dirección.

    var CajitaPrueba = new CajaDeCatalogo()

    class orden{
        CajaMusical cajita = CajitaPrueba;
        method tiempoEstimadoTotal(){
            return (this.tiempoEstimadoFabricacion() + cajita.TiempoEstimadoEntrega()) - this.DiasDesde(fechaCreacion)
            // devuelve una cantidad de dias
        }

        method DiasDesde(fecha){
            // metodo que devuelve la cantidad de dias que pasaron desde una fecha pasada por parámetro
            // es decir, hago la consulta un sábado, y le paso la fecha del lunes de esa misma semana, y el método me devolverá 5 días
            // que son los que pasaron desde el lunes hasta el sábado (inclusive)
            // la operacion sería: (fechaActual - fecha) siendo fechaActual la fecha actual en la que se llamó al metodo
            return int cantDias;
        }

        method tiempoEstimadoFabricacion(){
            return this.fabricante.tiempoFabricacion() // devuelve una cantidad de dias (int)
        }
    }

    class Caja{
        Melodia melodia;

        method tiempoEstimadoEntrega(){
            return this.melodia.tiempoEstimadoEntrega(); //devolvería la cantidad de dias
        }
    }

    class MelodiaDeCatalogo inherits Melodia{
        method tiempoEstimadoEntrega(){
            return 5 // devolvería 5 que serían los dias que indica la consigna que demora una caja de catalogo
        }
    }

    // suponemos que la melodía ya fue aprobada
    class MelodiaPersonlizada inherits Melodia{
        method tiempoEstimadoEntrega(){
            return 15 // devolvería 15 que serían los dias que indica la consigna que demora una caja de catalogo
        }
    }



5. Como cliente, poder consultar la dirección a la que llegó o llegará una orden que
realicé, independientemente de cuál sea mi dirección actual

      class orden{
            string direccionEnvio = 'Pedro Goyena 123';

            method getDireccioEnvio{
                return this.direccionEnvio;
            }
      }


6. Como persona administradora, poder dar de alta fábricas de cajas musicales en el
sistema, y actualizarlas cuando sea necesario.

    class fabricante{
        string nombre;
        string direccion;
        int capacidadProduccion;

        method Fabricante(string nombre, string direccion, int capacidadProduccion){
            this.nombre = nombre;
            this.direccion = direccion;
            this.capacidadProduccion = capacidadProduccion;
        }
        //es un constructor el cual será llamado por la interfaz a la hora de dar de alta al fabricante.

        //para actualizar los datos, se utilizarán los setters correspondientes
    }

7. Como persona administradora, poder consultar cuales son las fábricas que podrían
aceptar una (es decir, que no supere la capacidad de producción de la fabrica).

    class fabricante{
        int capacidadProduccion;
        List <Orden> ordenesAsignadas

        method puedeAceptar(unaOrden){
            return capacidadProduccion >= (size.ordenesAsignadas + 1) // devuelve un booleano
            // chequeamos que la capacidad de produccion sea mayor o igual a la cantidad de ordenes asignadas + 1
            // ¿porque +1? porque hacemos la comparacion SUPONIENDO QUE le estamos asignando la orden
            // si superamos la capacidad de produccion con la orden en cuestion, el fabricante no podrá hacer la caja musical
        }
    }

8. Como persona administradora, poder revisar (típicamente una o dos veces al día)
las órdenes pendientes y asignarles una fábrica a su elección que esté en
condiciones de aceptar la orden

    class fabricante{
        int capacidadProduccion;
        List <Orden> ordenesAsignadas

        method puedeAceptar(unaOrden){
           return capacidadProduccion >= (size.ordenesAsignadas + 1) // devuelve un booleano
        }

        method asignar(unaOrden){
            if(!this.puedeAceptar(unaOrden)){
                //lanzar error que el fabricante no está en condición de aceptar la orden
            }
            ordenesAsignadas.add(unaOrden)
            //se agrega la orden a la lista de ordenes asignadas del fabricante
        }
    }


9. Como persona administradora, poder consultar todas las órdenes asignadas a una
fábrica.

    class fabricante{
        List <Orden> ordenesAsignadas

        method getOrdenesAsignadas(){
            return ordenesAsignadas //devuelve una lista de ordenes
        }
    }


10. Como cliente, poder realizar una orden personalizada, subiendo el fragmento de
audio.

    class MelodiaPersonlizada inherits Melodia{
    String MIDI //este es la melodia ya convertida
        method cargar(melodia){
            AdapterMIDIConverter adapterConversor = new AdapterMIDIConverter()
            this.MIDI = CadapterConversor.convertir(melodia)
        }
    }

    class AdapterMIDIConverter{
        MIDIConverter conversorOriginal = new MIDIConverter()
        method convertir(melodia){
            return conversorOriginal.convert(melodia)
        }
    }


11. Como cliente, poder saber el precio de una orden, el cual se calcula de forma
diferente si es de una orden de catálogo o personalizada.

    class Orden{
    CajaMusical cajita

        method precio(){
            return cajita.precio() //devuelve un int que será el precio
        }
    }

    class Caja{
        Melodia melodia

        method precio(){
            this.melodia.precio();
        }
    }

    //en las interfaces se pone la firma de los metodos nada mas (nombre y tipo de dato que retornar)
    interface Melodia{
        method precio(){
            (...) //será redefinido por las clases cajaDeCatalogo y cajaPersonalizada
            return int precio;
        }
    }

    // @override ES SOLO PARA LAS CLASES ABSTRACTAS
    class MelodiaDeCatalogo inherits Melodia{
        method precio(){
            return X; //precio predefinido para las melodias de catalogo
            // devuelve un entero
        }
    }

    class MelodiaPersonlizada inherits Melodia{
        int longitudMelodia; // en segundos
        int valorDelSegundo; // un precio arbitrario que tendra cada segundo de reproduccion de la melodia

        method precio(){
            return longitudMelodia * valorDelSegundo;
            // devuelve el int
        }
    }

12. Como cliente, poder consultar si la orden personalizada fue aceptada o rechazada, y
recibir una notificación con esta misma información en cuanto el validador de
secuencias termine de ejecutarse. Soportar múltiples formas de notificación.

    // si lo ponemos en la orden, estamos dando lugar a que las ordenes de caja de catalogo sean aceptadas o rechazadas.

    class MelodiaPersonlizada inherits Melodia{
        Validacion validacion
        List<medioDeComunicacion> mediosComunicacion

        //para consultar el estado de la orden "manualmente"
        method getValidacion(){
            return this.validacion //devuelve el enum validacion
        }

        // para manejar las notificaciones de las validaciones decidimos usar el patron oberserver.
        // cuando el usuario valida o invalida una melodia personalizada utiliza los metodos marcarComoValida() y marcarComoInvalida() respectivamente
        // dichos metodos cambian el estado de la caja personalizada y a su vez llaman al meotodo notificar el cual sirve como punto de entrada
        // para enviar las notificaciones mediante los medios de comunicacion, es decir, es quien le da el pie a los observadores para enviar las notificaciones

        method marcarComoValida(){
            validacion.marcarComoValida()
            notificar()
        }

        method marcarComoInvalida(){
            validacion.marcarComoInvalida()
            notificar()
        }

        method notificar(){
            mediosComunicacion.forEach(mC -> mC.recibirNotificacion(cliente, getValidacion()))
            // le pasamos la validacion para saber que le tenemos que notificar al cliente (si es valida o invalida)
        }
    }

    interface MediosDeComunicacion{
        method recibirNotificacion(Remitente, Mensaje){
            (...)
        }
    }

    class MailSender{
        method recibirNotificacion(email, mensaje){
            this.send(email , 'Su orden ha sido validada', mensaje)
        }

        method send(adress, subject, body){
            (...)
        }
    }

13. Como persona administradora, poder listar todas las órdenes, independientemente
de su tipo y de si la transformación o validación terminó o no

    Por como modelamos las ordenes, estas mismas podrian estar dentro de uan coleccion y hacer un get para poder
    mostrarlas por pantallas.

    Descartamos que haya otro objeto el cual contenga las ordenes ya que el enunciado no lo tiene como requerimiento