@startuml
class Cuenta{
    String email
    MedioDePago medioDePago
    Nivel nivel
    Double ingreso
    List<MedioComunicacion> mediosDeComunicacion
    List<Transferencia> Transferencias
    EstadoCuenta estadoCuenta

    saldoDisponible(): double
    saldoBloqueado(): double
    getTransferencias(): List<Transferencia>
    enviar(double monto, Cuenta destinatario): void
    depositar(dobule monto): void
    retirar(dobule monto): void
    solicitarReactivacion(string motivo)
    calcularNivelCuenta(ingreso)

    recibir() // desarrolla otro equipo
}

Cuenta --> MedioDePago
Cuenta <-->"*" Transferencia
Cuenta --> Nivel
Cuenta --> EstadoCuenta

class Cronos{
    Cuenta cuentaAsociada
    procesarTransferencias(): void
    notificar(resultadoDeValidacion): void
}
Cronos -->"*" Cuenta
Cronos --> AdapterBCRA

'se crearÃ¡n 3 instancias, 1 por cada nivel con su respectivo porcentaje
class Nivel{
    double porcentajeDescuento
    descuento(dinero): double
}

interface MedioDePago{
    enviar(monto, cuenta)
}

class APIBancariaGenerica implements MedioDePago {
    enviar(monto, cuenta)
}

class AdapterMercadoPago implements MedioDePago{
    enviar(monto, cuenta)
}
AdapterMercadoPago ..> MercadoPagoClient

class MercadoPagoClient{
    send(...): boolean
}

class Transferencia{
    Date fecha
    double monto
    Cuenta remitente
    Cuenta destinatario
    double porcentajeCosto // =2
    EstadoTransfe EstadoTransfe
    List<MedioComunicacion> mediosDeComunicacion

    costo(): double // 2% - descuentoXnivel
    montoFinal(): double
    aceptar(): void
    rechazar(): void
    notificar(EstadoTransfe): void
    getEstado(): EstadoTransfe
}

Transferencia --> EstadoTransfe

enum EstadoTransfe{
    APROBADA
    PENDIENTE
    RECHAZADA
}

enum EstadoCuenta{
ACTIVA
BLOQUEADA_PREVENTIVAMENTE
BLOQUEADA_PERMANENTEMENTE
}

interface BCRAClient{
    getUserLevel(...): string
    List<Boolean> validateTransfer(...)
    sendUnblockRequest(...): boolean
}

class AdapterBCRA implements BCRAClient{
    solicitarNivelCuenta(ingreso)
    validarTransferencias(Cuenta, ListaMontos)
    solicitarReactivacion(cuenta)
}

AdapterBCRA -->"*" Transferencia
AdapterBCRA -->"*" Cuenta

Transferencia -->"*" MedioComunicacion

interface MedioComunicacion{
    recibirNotificacion(remitente, mensaje)
}

class Telegram implements MedioComunicacion{
    recibirNotificacion(destinatario, mensaje)
}
class SMS implements MedioComunicacion{
    recibirNotificacion(destinatario, mensaje)
}
class Email implements MedioComunicacion{
    recibirNotificacion(destinatario, mensaje)
}

@enduml