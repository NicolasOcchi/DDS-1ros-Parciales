@startuml
class Cuenta{
    String email
    medioDePago
    Nivel nivel
    mediosDeComunicacion
    List<Transferencia> Transferencias
    ListaUltimosMontosProcesados
    estadoCuenta
    notificar()
    enviarTransaccionesPendientes()
    procesarTransaccionesValidadas()
    saldoDisponible()
    listarTransacciones()
    procesarTransaccionesPendientes()
    recibir() // desarrolla otro equipo
    enviar(monto, cuenta)
    depositar(monto)
    retirar(monto)
    solicitarReactivacion()
}

Cuenta --> MedioDePago
Cuenta <-->"*" Transferencia
Cuenta --> Nivel
Cuenta --> EstadoCuenta

interface Nivel{
    descuento()
}

class Nivel_1 implements Nivel{
    descuento()
}
class Nivel_2 implements Nivel{
    descuento()
}
class Nivel_3 implements Nivel{
    descuento()
}

interface MedioDePago{
    enviar(monto, cuenta)
}

class APIBancariaGenerica implements MedioDePago {
    enviar(monto, cuenta)
}

class AdapterMercadoPago implements MedioDePago{
    enviar(monto, cuenta)
}
AdapterMercadoPago ..> MercadoPagoClient

class MercadoPagoClient{
    boolean send(...)
}

class Transferencia{
    tiempo
    monto
    remitente
    destinatario
    porcentajeCosto // =2
    costo() // 2% - descuentoXnivel
    montoFinal()
    estadoTransfe
}

Transferencia --> estadoTransfe

enum estadoTransfe{
    APROBADA
    PENDIENTE
    RECHAZADA
}

enum EstadoCuenta{
ACTIVA
BLOQUEADA_PREVENTIVAMENTE
BLOQUEADA_PERMANENTEMENTE
}

interface BCRAClient{
    getUserLevel(...): string
    List<Boolean> validateTransfer(...)
    sendUnblockRequest(...): boolean
}

class AdapterBCRA implements BCRAClient{
    solicitarNivelCuenta(ingreso)
    validarTransferencias(Cuenta, ListaMontos)
    enviarTransferenciaValidadas(Cuenta, ListaMontos)
    solicitarReactivacion(cuenta)
}

AdapterBCRA -->"*" Transferencia
AdapterBCRA -->"*" Cuenta

MedioComunicacion "*"<-- Cuenta

interface MedioComunicacion{

}

class Telegram implements MedioComunicacion{}
class SMS implements MedioComunicacion{}
class Email implements MedioComunicacion{}

@enduml