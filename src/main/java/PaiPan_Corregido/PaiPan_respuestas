1)

class Cuenta{
    String nombre;
    String email;
    Double ingreso;
    MedioDePago medioDePago;
    EstadoCuenta estadoCuenta;
    Nivel nivel;
    AdapterBCRA BancoCentral;

    method Cuenta(string nombre, string email, MedioDePago medioDePago, double ingreso){
        this.nombre = nombre;
        this.email = email;
        this.medioDePago = medioDePago;
        this.estadoCuenta = ACTIVA;
        this.ingreso = ingreso;
        this.nivel = this.getNivelCuenta(ingreso);
        // se llama al constructor cuando se quiera instanciar una cuenta nueva
    }

    method getNivelCuenta(ingreso){
       return this.BancoCentral.solicitarNivelCuenta(ingreso) //devuelve un entero que será el nivel
    }
}

AdapterBCRA{
    BCRAClient BCRAOriginal;

    method solicitarNivelCuenta(ingreso){
        return BCRAOriginal.getUserLevel(ingreso); //devuelve un entero que es el nivel
    }
}


2)

class Cuenta{
    method recalcularNivel(nuevoIngreso){
        this.setIngreso(nuevoIngreso)
        this.nivel = BancoCentral.solicitarNivelCuenta(nuevoIngreso);
    }
}

// AdapterBCRA y BCRAClient explicados en el anterior punto

3)
desde Cuenta se llamaría a retirar(monto) o depositar(monto) segun corresponda

class Cuenta{
    double monto;

    method retirar(monto){
        if(this.monto >= this.saldoDisponible()){
            error...
        }
        this.saldo =- monto;
    }
    method depositar(monto){
        this.saldo =+ monto;
    }
}

4)
class Cuenta{
    EstadoCuenta estadoCuenta;
    List<Transferencia> transferencias

    method enviar(double monto, Cuenta destinatario){
        if(this.estaBloqueada()){
            //lanzar error de cuenta bloqueada.
        }
        if(monto > this.saldoDisponible())[
            //lanzar error de saldo insuficiente.
        }

        //¿es necesario chequear que la otra cuenta está bloqueada?

        //utilizamos el constructor de la transferencia...
        Transferencia transferenciaNueva = new Transferencia(self, destinatario, monto, Pendiente, this.getFechaActual())

        this.transferencias.add(transferenciaNueva);
        // tambien se agrega  la transferencia recien creada a la lista de transacciones del destinatario
        destinatario.transferencias.add(transferenciaNueva);
    }

    method estaBloqueada(){ //retorna un booleano
        if(this.estadoCuenta == Activa){
            return false
        }
        else{
            return true
        }
    }
}



5)
class Cuenta{
    List<Transferencia> transferencias

    method saldoBloqueado(){
        transferenciasPendientes = transferencias.filter({ transferencia -> transferencia.estaPendiente()})
        montosTotales = transferenciasPendientes.map({transferencia -> transferencia.montoFinal()})
        retunr montosTotales.sum() // retorna un double que sería el saldo bloqueado.
    }
}

6)
<<Cuenta>>
meotod saldoDisponible(){
    if(estaBloqueada()){
        error... ya que si esta bloqueada no tiene saldo para operar
    }
    filtrar las transacciones realizadas del ListaTransacciones
    sumar montoFinal() de las transacciones filtradas
    retornar total de suma
}

7)
<<Cuenta>>
metodo listarTransacciones(){
    listar todas las transacciones del usuario que llama el metodo, ya sea pendientes, aprobadas o rechazadas.
}

8)
<<Cuenta>>
El método enviarTransaccionesPendientes servirá como punto de entrada a un crontab (desde un main) o a un timer
que se disparará a ciertas horas.

metodo enviarTransaccionesPendientes(){
    se filtran las transacciones pendientes de la ListaTransacciones
    se envian dichas transacciones al AdapterBRCA bajo el metodo ValidarTransacciones(Cuenta, ListaMontos)
}

metodo procesarTransaccionesValidadas(){
    se toman los montos de la listaUltimosMontosProcesados
    se analiza que montos corresponden a que transaccion de la ListaTransacciones
    se actualiza el estado de las transferencias.
    se notifica al usuario acerca de las transferencias procesadas con el metodo notificar()

    si hay 3 transacciones rechazadas consecutivas, cambiar el estado de la cuenta bloqueadaPreventivamente

    se limpia la listaUltimosMontosProcesados
}

<<AdapterBCRA>>
metodo validarTransferencias(Cuenta, ListaMontos){
    llama al metodo validateTransfer(...)
    al recebir las transferencias validadas llama al metodo enviarTransferenciaValidadas(Cuenta, ListaMontos)
}

9)
desde usuario se llama al metodo solicitarReactivacion(motivo) el cual envia un mensaje al adapterBCRAClient
que busca ejecutar el metodo solicitarReactivacion(cuenta, motivo) donde el parametro cuenta será la cuenta
que llamó el primer metodo.

<<Cuenta>>
metodo solicitarReactivacion(motivo){
    BCRA.solicitarReactivacion(self, motivo)
}