---------------------------------------------------------------------------------------------------------------
1)
class Cuenta{
    String nombre;
    String email;
    Double ingreso;
    MedioDePago medioDePago;
    EstadoCuenta estadoCuenta;
    Nivel nivel;
    AdapterBCRA BancoCentral;

    method Cuenta(string nombre, string email, MedioDePago medioDePago, double ingreso){
        this.nombre = nombre;
        this.email = email;
        this.medioDePago = medioDePago;
        this.estadoCuenta = ACTIVA;
        this.ingreso = ingreso;
        this.nivel = this.calcularNivelCuenta(ingreso);
        // se llama al constructor cuando se quiera instanciar una cuenta nueva
    }

    method calcularNivelCuenta(ingreso){
       return this.BancoCentral.solicitarNivelCuenta(ingreso) //devuelve un entero que será el nivel
    }
}

AdapterBCRA{
    BCRAClient BCRAOriginal;

    method solicitarNivelCuenta(ingreso){
        return BCRAOriginal.getUserLevel(ingreso); //devuelve un entero que es el nivel
    }
}

---------------------------------------------------------------------------------------------------------------
2)
class Cuenta{
    method recalcularNivel(nuevoIngreso){
        this.setIngreso(nuevoIngreso)
        this.nivel = calcularNivelCuenta(nuevoIngreso);
    }
}

// AdapterBCRA y BCRAClient explicados en el anterior punto
---------------------------------------------------------------------------------------------------------------
3)
desde Cuenta se llamaría a retirar(monto) o depositar(monto) segun corresponda

class Cuenta{
    double monto;

    method retirar(monto){
        if(this.monto >= this.saldoDisponible()){
            error...
        }
        this.saldo =- monto;
    }
    method depositar(monto){
        this.saldo =+ monto;
    }
}
---------------------------------------------------------------------------------------------------------------
4)
class Cuenta{
    EstadoCuenta estadoCuenta;
    List<Transferencia> transferencias

    method enviar(double monto, Cuenta destinatario){
        if(this.estaBloqueada()){
            //lanzar error de cuenta bloqueada.
        }
        if(monto > this.saldoDisponible())[
            //lanzar error de saldo insuficiente.
        }

        //¿es necesario chequear que la otra cuenta está bloqueada?

        //utilizamos el constructor de la transferencia...
        Transferencia transferenciaNueva = new Transferencia(self, destinatario, monto, Pendiente, this.getFechaActual())

        this.transferencias.add(transferenciaNueva);
        // tambien se agrega  la transferencia recien creada a la lista de transacciones del destinatario
        destinatario.transferencias.add(transferenciaNueva);
    }

    method estaBloqueada(){ //retorna un booleano
        if(this.estadoCuenta == Activa){
            return false
        }
        else{
            return true
        }
    }
}


---------------------------------------------------------------------------------------------------------------
5)
class Cuenta{
    List<Transferencia> transferencias

    method saldoBloqueado(){
        transferenciasPendientes = transferencias.filter({ transferencia -> transferencia.estaPendiente()})
        montosTotales = transferenciasPendientes.map({transferencia -> transferencia.montoFinal()})
        return montosTotales.sum() // retorna un double que sería el saldo bloqueado.
    }
}
---------------------------------------------------------------------------------------------------------------
6) REVISAR!!!!
class Cuenta{
    List<Transferencia> transferencias

    meotod saldoDisponible(){
    if(estaBloqueada()){
        //lanzar error de cuenta bloqueada (ya que si esta bloqueada no tiene saldo para operar)
    }
    method saldoBloqueado(){
        transferenciasAprobada = transferencias.filter({ transferencia -> transferencia.estaAprobada()})
        montosTotales = transferenciasPendientes.map({transferencia -> transferencia.montoFinal()})
        return montosTotales.sum() // retorna un double que sería el saldo bloqueado.
    }
}
---------------------------------------------------------------------------------------------------------------
7)
class Cuenta{
    List<Transferencia> transferencias

    method listarTransacciones(){
        return transferencias; // retorna la lista de transferencias
    }
}
---------------------------------------------------------------------------------------------------------------

8)

class Cronos{
    Cuenta cuentaAsociada;
    AdapterBCRA BCRA_Adaptado;

    // se llamará el metodo cada una X cantidad de tiempo (crontask)
    method procesarTransferencias(){
        transfePendientes = this.tomarTransferenciasPendientes();
        montosTransferenciasPendientes = transfePendientes.map(t -> t.montoFinal());
        ResultadosDeValidaciones = BCRA_Adaptado.validarTransferencias(cuentaAsociada, montosTransferenciasPendientes);
        //a su vez, se chequea que no sean mas de 20 por la limitaciones aclarada por consigna...

        // cambiar el estado de las transferencias (a Aprobada o rechazada)
        Aparear las listas "transfePendientes" con "ResultadosDeValidaciones".
        listaApareada.forEach (parOrdenado -> parOrdenado.cambiarEstadoSegunResultado(ResultadoDeValidacion))

        // ejecutar las transferencias APROBADAS
        (listaApareada.filter(parOrdenado -> parOrdenado.estaAprobada())).forEach(t -> t.ejecutarTransferencia())
        // del par ordenado se utilizará el objeto Transferencia...

        // notificar resultados de las transferencias
        listaApareada.forEach (parOrdenado -> parOrdenado.notificar(ResultadoDeValidacion))
        // del par ordenado se utilizará el objeto/instancia Transferencia...

        // chequear si hay 3 rechazadas seguidas (si hay, bloquear cuenta)
        if(ResultadosDeValidaciones.analizarTresRachazadasSeguidas()){
            cuentaAsociada.estadoCuenta = BLOQUEADA_PREVENTIVAMENTE
        }
        // se analiza si hay 3 transferencias rechazadas seguidas, de ser así, se cambia el estado de la cuenta a
        // bloqueada preventivamente

    }

    method tomarTransferenciasPendientes(){
        cuentaAsociada.getTransferenciasPendiente()
    }

    method analizarTresRachazadasSeguidas(){
        (...)
    }
}

class Cuenta{
    List<Transferencia> transferencias

    method getTransferenciasPendiente(){
        return transferencias.filter({t -> t.estaPendiente()}); // retorna la lista de transferencias pendientes
    }
}

class Transferencia{
    method notificar(EstadoTransfe estadoTransfe){
        this.medioComunicacion.forEach(m -> m.recibirNotificacion(this.remitente, this.estadoTransfe))
        this.medioComunicacion.forEach(m -> m.recibirNotificacion(this.destinatario, this.estadoTransfe))
        //notificamos tanto el que realiza la transferencia como tambien el que la recibe.
    }
}

interface MedioDeComunicacion{
    method recibirNotificacion(destinatario, mensaje){
        //es de tipo void...
    }
}

// a continuación damos un ejemplo de como habría que redefinir el método para utilizarlo en las clases.
// lo mismo habria que hacer para los canales SMS y Telegram...

class Email inherits MedioDeComunicacion{
    method recibirNotificacion(destinatario, mensaje){
        send(destinatario.email, asunto, mensaje)
    }

    method send(email, asunto, cuerpo){ //esto está demas, lo agregue como para que se entienda que la clase mail sería un MailSender.
        (...)
    }
}

---------------------------------------------------------------------------------------------------------------

9)
class cuenta{
    EstadoCuenta estadoCuenta;
    AdapterBCRA BCRA_adaptado;

    method solicitarReactivacion(string motivo){
        respuesta = BCRA_adaptado.solicitarReactivacion(this, motivo); //devulve un booleano, el cual dirá si el desbloqueo fue aceptado o no
        if(respuesta == true){
            this.estadoCuenta = ACTIVA;
        }else{
            this.estadoCuenta = BLOQUEADO_PERMANENTEMENTE;
        }
    }

}

class Adapter BCRA{
    BCRACliente BCRA_Posta;

    method solicitarReactivacion(Cuenta cuenta, string motivo){
        return BCRA_Posta.sendUnblockRequest(cuenta, motivo);
        //devulve un booleano, el cual dirá si el desbloqueo fue aceptado o no
    }
}