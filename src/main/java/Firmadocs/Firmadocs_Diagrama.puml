@startuml

ProcesoFirma "*"<-->"*" Colaborador
ProcesoFirma --> Orden

class ProcesoFirma{
finalizado // boleano
inicador
PDF
Orden orden
ListaColaboradores
ListaColaboradoresQueLeyeron
ListaColaboradoresQueFirmaron
notificarPosibilidadDeRealizarAccion(Colaborador) //se notifica segun el orden
sePuedeLiberarDocumento() // se ejecuta cada vez que firma uno
liberarDocumento()
notificarLiberacion()
puedeRealizarAccion(Colaborador)
recordatorioDeCompletarAccion()
}

enum Orden{
indistinto
prefijado
}

Colaborador <|-- Firmante
Colaborador <|-- Lector

class Colaborador{
ListaNotificacionesPendientes
ListaMediosDeComunicacion
ListaDocumentosCompartidos
realizarAccion(documento)
notificar()
}

class Firmante{
realizarAccion(documento)
}

class Lector{
realizarAccion(documento)
}

MedioComunicacion <|.. Whatsapp
MedioComunicacion <|.. SMS
MedioComunicacion <|.. Email
MedioComunicacion <|.. Aplicacion

MedioComunicacion "*"<-- Colaborador

interface MedioComunicacion{

}

class Whatsapp{}
class SMS{}
class Email{}
class Aplicacion{}

GeneradorDeFirma <|..GeneradorDeFirmaAPI
GeneradorDeFirmaAPI -->"*" ProcesoFirma

class GeneradorDeFirmaAPI{
anexarCodigoADocumento(documento)
}

interface GeneradorDeFirma{
generarFirma(nombre, apellido, email, telefono): string
}

Iniciador -->"*" ProcesoFirma

class Iniciador{
Plan
ListaProcesosDeFirma
CantProcesosFirmaMensuales()
PuedeIniciarProcesoFirma()
ProcesoFirma(PDF, Orden, ListaColaboradores) //constructor
Anular(ProcesoFirma)
}

Plan <|.. Plata
Plan <|.. Oro
Plan <|.. Bronce

Iniciador --> Plan
interface Plan{
CantProcesosMensualesBase()
}

class Plata{
CantProcesosMensualesBase
}
class Oro{
CantProcesosMensualesBase
}
class Bronce{
CantProcesosMensualesBase
}

@enduml