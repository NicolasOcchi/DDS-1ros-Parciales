@startuml

ProcesoFirma "*"<-->"*" Colaborador
ProcesoFirma --> Orden

class ProcesoFirma{
finalizado // boleano
inicador
PDF
Orden orden
ListaColaboradores
ListaColaboradoresQueHicieronAccion
notificarPosibilidadDeRealizarAccion(Colaborador) //se notifica segun el orden
sePuedeLiberarDocumento() // se ejecuta cada vez que firma uno
liberarDocumento()
notificarLiberacion()
puedeRealizarAccion(Colaborador)
recordatorioDeCompletarAccion()
}

enum Orden{
indistinto
prefijado
}

Colaborador <|-- Firmante
Colaborador <|-- Lector

class Colaborador{
medioComunicacion
listaDocumentosCompartidos
realizarAccion(documento)
}

class Firmante{
realizarAccion(documento)
}

class Lector{
realizarAccion(documento)
}

GeneradorDeFirma <|..GeneradorDeFirmaAPI
GeneradorDeFirmaAPI -->"*" ProcesoFirma

class GeneradorDeFirmaAPI{
anexarCodigoADocumento(documento)
}

interface GeneradorDeFirma{
generarFirma(nombre, apellido, email, telefono): string
}

ProcesoFirma --> Notificador
Notificador -->"*" Evento
class Notificador{
notificar(Colaborador, Evento evento)
}

interface Evento{}

Evento <|-- DocumentoCompartido
Evento <|-- ColaboradorCompletoAccion
Evento <|-- ProcesoFirmaCulminado

class DocumentoCompartido{}

class ColaboradorCompletoAccion{}

class ProcesoFirmaCulminado{}

Iniciador -->"*" ProcesoFirma

class Iniciador{
TipoPlan
ProcesosMensualesDisponibles()
ProcesoFirma()
}

Plan <|-- Plata
Plan <|-- Oro
Plan <|-- Bronce

Iniciador --> Plan
interface Plan{
ProcesosMensualesDisponibles()
}

class Plata{
CantProcesosMensualesBase
}
class Oro{
CantProcesosMensualesBase
}
class Bronce{
CantProcesosMensualesBase
}



@enduml